/* 
 * File:   main.cpp
 * Author: johns
 *
 * Created on April 10, 2021, 1:08 PM
 */
#include <plib.h>
#include <cstdlib>

// Defines from M5, change later for Ian
#define SYSCLK 40000000L
// Macros from M5
// Equation to set baud rate from UART reference manual equation 21-1
#define Baud2BRG(desired_baud)      ( (SYSCLK / (16*desired_baud))-1)

// Ian's pin setup
#pragma config U1RXR = 0b0010 // U1RX GPS, RPA4
#pragma config U2RXR = 0b0011 // LIDAR, RPB11
#pragma config RPA1R = 0101 // OC2, PWM config TODO

#pragma config RPA0R = 0001 // U1TX, LEDs
#pragma config RPB0R = 0010 // U2TX, LEDs

// not needed with M5 helper function
//#pragma config U1BRG = // 9600
//#pragma config U2BRG = // 115200

using namespace std;

/*
 * 
 */
// function prototypes
int UART1Configure( int baud);
int UART2Configure( int baud);

int main(void) {
    UART1Configure(9600) // GPS
    UART2Configure(115200) // LiDAR
            
    // receiving and error handling free style coding
    // not using interrupts cause idk what they do, event based handling?
            
    // The data in the receive FIFO should be read prior to clearing the OERR bit. The
    // FIFO is reset when the OERR bit is cleared, which causes all data in the buffer to
    // be lost.   
    char buf1[1024]; // idk why this is the max size declared on M5 page
    char buf2[1024];
    
    // URXDA is if 1 piece of data or more is available, maybe the data set goes here
    while( !U1STAbits.URXDA);   // wait until data available in RX buffer (from M5), URXDA is a read only bit telling if buffer is empty 0, or has something 1
    *buf1 = U1RXREG;
    if(U1STAbits.OERR == 1); // if overflow
        U1STAbits.OERR = 0;
    while( !U2STAbits.URXDA);   // wait until data available in RX buffer (from M5)
    *buf2 = U2RXREG;
    if(U2STAbits.OERR == 1); // if overflow
        U2STAbits.OERR = 0;
    
    
    return 1;
}

// helper functions

int UART1Configure( int desired_baud){
    // M5 doesnt use pragma config here
    //#pragma config U1MODE = 0x8000 // no parity<1-2>, 1 stop bit<0>, <15>, M5 has it as 0
    //#pragma config U1STA = 0x00001000 // enable receive bit <12>
    U1MODE = 0x8000;
    U1STA = 0x00001000;
    // M5 stuff
    // U2MODE = 0;         // disable autobaud, TX and RX enabled only, 8N1, idle=HIGH
    // U2STA = 0x1400;     // enable TX and RX
    U1BRG = Baud2BRG(desired_baud); // U2BRG = (FPb / (16*baud)) - 1    
    // Calculate actual assigned baud rate
    int actual_baud = SYSCLK / (16 * (U1BRG+1));
 
    return actual_baud;
} // END UART1Configure()

int UART2Configure( int desired_baud){
    // M5 doesnt use pragma config here
    //#pragma config U1MODE = 0x8000 // no parity<1-2>, 1 stop bit<0>, <15>, M5 has it as 0, MODESET 0x8000
    //#pragma config U1STA = 0x00001000 // enable receive bit <12>
    U2MODE = 0x8000;
    U2STA = 0x00001000;
    // M5 stuff
    // U2MODE = 0;         // disable autobaud, TX and RX enabled only, 8N1, idle=HIGH
    // U2STA = 0x1400;     // enable TX and RX
    U2BRG = Baud2BRG(desired_baud); // U2BRG = (FPb / (16*baud)) - 1    
    // Calculate actual assigned baud rate
    int actual_baud = SYSCLK / (16 * (U2BRG+1));
 
    return actual_baud;
} // END UART2Configure()
